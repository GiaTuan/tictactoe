{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","index.js"],"names":["Square","value","onClick","colorPlayer","color","backgroundColor","highlight","className","style","Board","i","squares","j","this","renderASquare","isHighlight","props","includes","key","renderSquares","rows","renderARow","renderRows","React","Component","checkWinner","winPositions","length","a","b","c","Game","reverseHistoryClick","setState","isAscendantPosition","state","history","Array","fill","stepNumber","isXTurn","arrayOfIndexOfSquareClicked","winRow","slice","tempSquares","checkWin","temparrayOfIndexOfSquareClicked","concat","current","result","winner","every","nSquare","notify","Math","floor","boldHistorySelection","fontWeight","jumpTo","status","getStatusGame","historyButtons","map","generateHistory","reverse","handleSquareClicked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4cb4dc2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square({value,onClick,highlight}){\r\n\r\n    const colorPlayer = {\r\n      color: value === 'X' ? 'blue' : 'red', \r\n      backgroundColor: highlight ? 'yellow' : ''\r\n    };   \r\n  \r\n    return (\r\n      <button className=\"square\" onClick = {onClick} style={colorPlayer}>\r\n        {value}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  export default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n    \r\n    renderSquares(i){\r\n        let squares = []\r\n        for(let j = 0 ; j < 3 ; j++)\r\n        {\r\n            squares = [...squares, this.renderASquare(i*3+j)];\r\n        }\r\n        return squares;\r\n    }\r\n    \r\n    renderASquare(i) {\r\n      const winRow = [...this.props.highlight]\r\n      let isHighlight = false;\r\n      if(winRow.includes(i))\r\n      {\r\n          isHighlight = true;\r\n      }\r\n      return <Square key={i} value = {this.props.squares[i]} onClick = {() => this.props.onClick(i)} highlight = {isHighlight} />;\r\n    }\r\n\r\n    renderARow(i){\r\n        return(\r\n            <div className=\"board-row\" key = {i}>\r\n                {this.renderSquares(i)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRows(){\r\n        let rows = [];\r\n        for(let i = 0 ; i < 3 ; i++)\r\n        {\r\n            rows = [...rows, this.renderARow(i)];\r\n        }\r\n        return rows;\r\n    }\r\n  \r\n    render() {\r\n        const rows = this.renderRows();\r\n\r\n      return (\r\n        <div>\r\n          {rows}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Board;","import React from 'react';\r\nimport Board from './Board';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares : Array(9).fill(null),\r\n      }],\r\n      stepNumber : 0,\r\n      isXTurn : true,\r\n      arrayOfIndexOfSquareClicked: [],\r\n      isAscendantPosition: true,\r\n      winRow: []\r\n    }\r\n  }\r\n\r\n  handleSquareClicked(i){\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const tempSquares = current.squares.slice();\r\n    if(this.state.winRow.length > 0 && this.state.stepNumber !== this.state.history.length -1){\r\n      this.setState({\r\n        winRow: []\r\n      })\r\n    }\r\n\r\n    if(tempSquares[i] || this.state.winRow.length > 0){\r\n      return;\r\n    }   \r\n\r\n    tempSquares[i] = this.state.isXTurn ? 'X' : 'O';\r\n\r\n    const checkWin = checkWinner(tempSquares);\r\n\r\n    if(checkWin !== null)\r\n    {\r\n      this.setState({\r\n        winRow: checkWin[1]\r\n      });\r\n    }\r\n\r\n\r\n    const temparrayOfIndexOfSquareClicked = this.state.arrayOfIndexOfSquareClicked.slice(0,this.state.stepNumber);\r\n\r\n    this.setState({\r\n      history : history.concat([{\r\n        squares: tempSquares\r\n      }]),\r\n      stepNumber : history.length,\r\n      isXTurn : !this.state.isXTurn,\r\n      arrayOfIndexOfSquareClicked: [...temparrayOfIndexOfSquareClicked,i]\r\n    });\r\n  }\r\n\r\n  jumpTo(key)\r\n  {\r\n    this.setState({\r\n      stepNumber: key,\r\n      isXTurn: (key % 2) === 0,\r\n    });\r\n  }\r\n\r\n  getStatusGame(current)\r\n  {\r\n    const result = checkWinner(current.squares);\r\n    let winner = null;\r\n    if(result !== null)\r\n    {\r\n        winner = result[0];\r\n    }\r\n    let status;\r\n    \r\n    if(checkDraw(current) && winner === null)\r\n    {\r\n      status = 'Draw match';\r\n    }\r\n    else{\r\n      if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      } \r\n      else {\r\n        status = 'Next player: ' + (this.state.isXTurn ? 'X' : 'O');\r\n      }\r\n    } \r\n    return status;\r\n  }\r\n\r\n\r\n  \r\n  generateHistory(value,key)\r\n  {\r\n    let nSquare;\r\n    if(key !== 0)\r\n    {\r\n      nSquare = this.state.arrayOfIndexOfSquareClicked[key-1];\r\n    }\r\n    const notify = key === 0 ? \"Go to game start\" : \"Go to move #(\" + (nSquare%3+1) + \",\" + (Math.floor(nSquare/3)+1) + \")\";\r\n    \r\n    const boldHistorySelection = {\r\n        fontWeight: key === this.state.stepNumber ? 'bold' : ''\r\n    };\r\n    return (\r\n      <li key={key}>\r\n        <button style={boldHistorySelection} onClick = {()=> this.jumpTo(key)}>{notify}</button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n    reverseHistoryClick = () => {\r\n        this.setState({\r\n            isAscendantPosition: !this.state.isAscendantPosition\r\n        })\r\n    }\r\n  \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const status = this.getStatusGame(current);\r\n      const historyButtons = history.map((value,key) => this.generateHistory(value,key));\r\n      if(!this.state.isAscendantPosition) historyButtons.reverse();\r\n  \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board squares = {current.squares} onClick = {(i) => this.handleSquareClicked(i)} highlight = {this.state.winRow} />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <div><button onClick = {this.reverseHistoryClick}>Reverse history list</button></div>\r\n            <ol>{historyButtons}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function checkWinner(squares){\r\n    const winPositions = [\r\n      [0,1,2],\r\n      [3,4,5],\r\n      [6,7,8],\r\n      [0,3,6],\r\n      [1,4,7],\r\n      [2,5,8],\r\n      [0,4,8],\r\n      [2,4,6]\r\n    ];\r\n    for (let i = 0; i < winPositions.length; i++) {\r\n      const [a, b, c] = winPositions[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return [squares[a],[a,b,c]];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  function checkDraw(currentPositionBoard)\r\n  {\r\n      return currentPositionBoard.squares.every(value => value !== null);\r\n  }\r\n\r\n  export default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Components/Game';\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}